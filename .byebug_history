continue
@values
continue
calculator_params
params
continue
@arraId
continue
@arraiId
continue
@arrayId
continue
@arrayId
continue
array[0]
array
exit
continue
path.join("/")
path
continue
array[0].join("/")
array[0]
array
continue
algo.join("/")
algo
exit
algo
@variable
exit
continue
algo.inspect
algo.index
algo == "home"
algo
continue
algo
continue
algo
algo.where("home")
algo.find_all("home")
algo
algo[0].index
algo.index
algo.map{|algo| if algo=="uploads" puts algo.index}
algo
algo = @charts.first.file.path.split("/")
continue
@counter
continue
csv_array
continue
@anyelo
continue
@graph.file.path
@graph.file
continue
@anyelo
continue
@result.html_safe
@result = CSV.open("#{@graph.file.path}", :headers => true).map { |x| x.to_hash }.to_json
@result.to_s
@result.to_h
@result
@anyelo
continue
@result
continue
@data
@data.to_json.gsub(/\"text\"/, "text").html_safe
@data
continue
data_array
continue
@result = CSV.parse(data)
@result = CSV.parse(@data)
@data
@result = CSV.parse(@data)
@data
continue
@datos
continue
@result.first
@result[0]
@result
~ @result
continue
@result
continue
@result.shift
@result
continue
@result
@result.shift
@result.pop
@result.unshift
@result
continue
@result
data
@result.each_with_index {|x,index| puts x[index][1]}
@result.each {|x| puts x[0][0]}
@result.each {|x| puts x[0]}
@result
@result.each_with_index do |x, y| parte_2.push([x[y][0], x[y][2]]) end
@result.each_with_index |x, y| parte_2.push([x[y][0], x[y][2]])
@result.each_with_index{ |x, y| parte_2.push([x[y][0], x[y][2]])}
@result.each_with_index{ |x, y| parte_2.push([x[y][0], x[y][2]]}
@result.each_with_index do |x, y| parte_2.push([x[y][0], x[y][2]]) end
parte_2 = []
@result.each_with_index do |x, y| parte_1.push([x[y][0], x[y][2]]) end
@result.each_with_index do |x, y| parte_1.push([@result[x][0],@result[x][2]]) end
@result.each_with_index do |x, y| parte_1.push([@result[y][0],@result[y][2]]) end
@result.each_with_index do |x, y|
parte_1 = []
qwe.push([@result[1][0],@result[1][2]])
qwe.push([@result[0][0],@result[0][2]])
qwe.push
qwe = []
qwe
qwe = [@result[0][0],@result[0][2]]
qwe = []
@result
asd.push([2,3])
asd
asd[0].push(3)
asd.push(3)
asd = [[]]
@result
asd = [[]]
@result[0][1]
@result[0]
@result[0
@result
@result.each_with_index do |x, index|
@result.each_with_index do |index, y|
@result.each_with_index do |x, y|
continue
@result
continue
render json: [{name: 'Datos 1', data: @result.reverse}, {name: 'asd', data_2: @result.reverse}]
continue
CSV.parse(data, data)
CSV.parse(data)
@result
data
continue
@result.reverse
@result
continue
@result = CSV.parse(data)
data = File.open("#{@graph.file.path}").read
@graph.file.path
@graph
@graph = Chart.find(params[:id])
@graph
continue
params
continue
params
continue
params
continue
Banner.find(1)
Banner.id(1)
Banner.all
params
continue
params
continue
@p.banner.map
@p.banner
@p = @banners.first
@banners.first
@1 = @banners.first
@banners = Banner.
continue
@algo
continue
CSV.parse(codata).to_json
continue
keys = lines.shift  
lines = CSV.open(@banner.path,{:col_sep => "\|"}).readlines
lines = CSV.open(ARGV[0],{:col_sep => "\|"}).readlines
exit
f «« row
row
continue
row
